#summary Project Introduction
#labels Featured

= Ruby framework for Power DNS Pipe Backend =

A lot of cases require custom DNS responses based on location, time of day, monitoring status or many other situations, traditional DNS hosting systems makes this *very* hard.  [http://www.powerdns.com/ PowerDNS] makes this a bit easier for the skilled hacker with it's [http://doc.powerdns.com/pipebackend-dynamic-resolution.html Pipe Backend] but the documentation and implementation details can be quite scary, what if someone made a simple framework to make this easy?  This is that framework.

The simplest way to show what it does is by example, here is a record that does Geo Location based responses for _www.your.net_:

{{{
module Pdns
  newrecord("www.your.net", :type => :record) do |query, answer|
    case country(query[:remoteip])
      when "US", "CA"
        answer.content "64.xx.xx.245"

      when "ZA", "ZW"
        answer.content "196.xx.xx.10"

      else
        answer.content "78.xx.xx.140"
      end
  end
end
}}}

Place this file in _/etc/pdns/records/www.your.net.prb_ and it would get served with full Geo capability,

The language is Ruby, a number of helper functions are provided to do common things like Geo lookups, randomization and so forth and effort has been made to make it intuitive even for non programmer to write simple records, perhaps by using recipes on this site.

This framework allows you to do this and much more, see subjects below for further details.

== Use Cases / Recipes ==
 * [RecipeGeoLocation Location Based] - using Maxmind GeoIP
 * [RecipeWeightedRoundRobin Weighted Round Robin] - adjusting ratios of traffic to machines/sites
 * [RecipeTimeBased Time Based] - sending VIP customers to a low used site based on time

== Programming Reference ==
 * [ReferenceInfoAboutRequests Information available about the request]
 * [ReferenceConstructingReplies Constructing replies]
 * Helpers and Plugins
   * [ReferenceRubyExtensions Extensions and helpers to the Ruby language]
   * [ReferenceGeoIP GeoIP Functions]

== Installation ==
 * todo

== Configuration ==
 * todo

== TODO List ==
 * Report stats, at present each instance keeps query count stats per record, but no reporting of that yet
 * Some kind of handling of external data like monitoring data that can then be used in record logic
 * Give each record block an id and track that id, answering _AXFR id_ questions correctly with a per record SOA block
 * Redirect STDOUT to /dev/null or something till we are ready to construct the answer
 * Make components like the GeoIP capability a plugin so others can easily write and extend
 * Provide a Caching system that modules like GeoIP can use

== Release History ==
 ||2009-08-09||Move to Google Code||
 ||2009-08-02||First release||